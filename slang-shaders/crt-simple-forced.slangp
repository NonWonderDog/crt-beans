shaders = 6

//======== Force output size (fix dolphin)
shader0 = shaders/stock.slang
mipmap_input0 = false
scale_type_x0 = absolute
scale_x0 = 640
scale_type_y0 = absolute
scale_y0 = 480
float_framebuffer0 = true

//======== Transform color space if necessary.
shader1 = shaders/transform.slang
mipmap_input1 = false
scale_type1 = source
scale1 = 1.0
float_framebuffer1 = true

//======== Low-pass filter and sample to simulate an analog signal.
// Also, convert to linear RGB for the next pass.
shader2 = shaders/filter.slang
alias2 = "Filtered"
mipmap_input2 = false
filter_linear2 = true
scale_type_x2 = viewport
scale_x2 = 0.5
scale_type_y2 = source
scale_y2 = 1.0
float_framebuffer2 = true

//======== Draw the scanlines, handling interlacing.
// We do the expensive width calculations in a separate pass so that we don't
// need to duplicate them for every fragment in the next pass.
shader3 = shaders/calculate_widths.slang
mipmap_input3 = false
scale_type3 = source
scale3 = 1.0
float_framebuffer3 = true

shader4 = shaders/spot.slang
filter_linear4 = false
alias4 = "Scanlines"
wrap_mode4 = clamp_to_border
mipmap_input4 = false
scale_type4 = viewport
scale4 = 1.0
float_framebuffer4 = true

//======== Convert to sRGB.
shader5 = shaders/composite_output_noglow.slang
filter_linear5 = true
wrap_mode5 = clamp_to_border
mipmap_input5 = false
scale_type5 = viewport
scale5 = 1.0
